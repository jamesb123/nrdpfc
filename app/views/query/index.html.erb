<h1>Query</h1>

<% content_tag :div, :id => "query_form" do %>
<div style="width:250px; display:block; float:left;" />
  <h2>Tables</h2>
  <div id='query_table_selector'>
    <% Exportables::ExportableModel.models.each do |model| %>
      <div>
        <%= link_to_function(model.exportable_name.titleize, "toggle_section('#{model.exportable_name}')") %>
      </div>    
    <% end %>
  </div>
</div>

<div id="query_field_selector" style="width:250px; display:block; height:400px; overflow: auto; float:left;">
  <% Exportables::ExportableModel.models.each do |model| 
      table_name = model.exportable_name
      fields_ul_id = "#{table_name}_fields"
  %>
  <div id="<%= fields_ul_id %>" style="display: none">
    <h2><%= model.exportable_name.titleize %></h2>
    <div><%= link_to_remote("- Add all -", :url => {:action => "add_field", :table => table_name}) %></div>
    <% model.exportable_fields.each do |field| %>
      <div><%= link_to_remote(field.titleize, :url => {:action => "add_field", :table => table_name, :field => field}) %></div>
    <% end %>
  </div>
  <% end %>
</div>

<div style="width:600px; display:block; float:left">
  <h2>Selected Fields</h2>
  <table id='selected_fields_entries_table'>
    <thead>
      <tr>
        <th></th>
        <th style="text-align: left">Model Name</th>
        <th style="text-align: left">Field Name</th>
        <th style="text-align: left">Sort</th>
        <th style="text-align: left; width:300px">Filter</th>
      </tr>
    </thead>
    <tbody id="selected_fields_entries">
    </tbody>
  </table>
  <%= link_to_function "#{image_tag('cancel.png')} Start Over", "$$('#selected_fields_entries_table tbody tr').each(function(e) { e.remove(); });" %>
</div>
<br clear='both' />
  <% indicated_div "query_submit_button" do %>
    <%= content_tag :button, "Preview", :onclick => 
          remote_function(
            :url => {:action => "show" }, 
            :submit => "query_form", 
            :indicate => "query_submit_button", 
            :update => "results_output", 
            :html => {:id => "query_form"}) %>
    <%= content_tag :button, "Save", :onclick => 
          remote_function(
            :url => {:action => "save_query" }, 
            :submit => "query_form", 
            :indicate => "query_submit_button", 
            :update => "results_output", 
            :html => {:id => "query_form"}) %>
    <%= content_tag :button, "Download (csv)", :onclick => "download_csv();" %>
  <% end %>
<% end %>

<script language='javascript'>
  function download_csv() {
    window.open("/query/download_csv?" + Form.serialize("query_form"));
  }
  
  function go_select_all(this_cb)
  {
    $(this_cb).up('ul').getElementsBySelector('input[type=checkbox]').each(function(cb) { cb.checked = this_cb.checked });    
  }
  
  function toggle_section(table_name)
  {
    var fields_ul_id = table_name + "_fields";
    
    $$("#query_field_selector > div").each(function(ul) {
      if (ul.id == fields_ul_id) { new Effect.BlindDown(ul, { duration: 0.5 }); return false; }
      if (ul.visible()) new Effect.BlindUp(ul);
    });
  }

  Sorter = Class.create();
  Sorter.prototype = {
    initialize: function(table, column_classes) {
      this.table = $(table);
      this.column_classes = column_classes
    },
    get_rows: function() {

 
  
         return this.table.getElementsBySelector('tr');
    },    
    do_sort: function() {
      if(this.get_rows().length <= 1) return this;
  
      var rows = this.get_rows();
      do {
        var sorted = true;
        for (x=0; x<= rows.length - 2; x++) {
  
          var row1 = rows[x]
          var row2 = rows[x+1];
          if (!row2) continue;
          if (this.compare_rows(row1, row2) == 1) {
            rows[x] = row2;
            rows[x+1] = row1;
            sorted = false;
          }
        }
      } while (! sorted);
  
      that = this;
      rows.each(function(r) { r.remove()});
      rows.each(function(r) { that.table.appendChild(r)});
      return this;
    },
    do_uniq: function() {
      var rows = this.get_rows();
      for (x=0; x<= rows.length - 2; x++) {
        var row1 = rows[x]
        var row2 = rows[x+1];
        if (this.compare_rows(row1, row2) == 0) {
          rows.splice(x+1, 1);
          row2.remove();
          sorted = false;
        }
      }
      return this;
    },
    compare_rows: function(r1, r2) {
      return this.column_classes.map(function(c) {
        if (r1.id == r2.id) 
          return null;
        else if (r1.id > r2.id)
          return 1;
        else
          return -1;
      }).compact().first() || 0;
    }
  }

</script>

<div id="results_output">
  
</div>
